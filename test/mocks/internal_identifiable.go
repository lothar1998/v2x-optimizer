// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/internal/performance/optimizer (interfaces: Identifiable)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/lothar1998/v2x-optimizer/pkg/data"
	optimizer "github.com/lothar1998/v2x-optimizer/pkg/optimizer"
)

// MockIdentifiable is a mock of Identifiable interface.
type MockIdentifiable struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifiableMockRecorder
}

// MockIdentifiableMockRecorder is the mock recorder for MockIdentifiable.
type MockIdentifiableMockRecorder struct {
	mock *MockIdentifiable
}

// NewMockIdentifiable creates a new mock instance.
func NewMockIdentifiable(ctrl *gomock.Controller) *MockIdentifiable {
	mock := &MockIdentifiable{ctrl: ctrl}
	mock.recorder = &MockIdentifiableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifiable) EXPECT() *MockIdentifiableMockRecorder {
	return m.recorder
}

// Identifier mocks base method.
func (m *MockIdentifiable) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockIdentifiableMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockIdentifiable)(nil).Identifier))
}

// Optimize mocks base method.
func (m *MockIdentifiable) Optimize(arg0 context.Context, arg1 *data.Data) (*optimizer.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Optimize", arg0, arg1)
	ret0, _ := ret[0].(*optimizer.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Optimize indicates an expected call of Optimize.
func (mr *MockIdentifiableMockRecorder) Optimize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Optimize", reflect.TypeOf((*MockIdentifiable)(nil).Optimize), arg0, arg1)
}
