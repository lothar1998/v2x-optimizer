// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/pkg/optimizer/genetic (interfaces: RandomGenerator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomGenerator is a mock of RandomGenerator interface.
type MockRandomGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomGeneratorMockRecorder
}

// MockRandomGeneratorMockRecorder is the mock recorder for MockRandomGenerator.
type MockRandomGeneratorMockRecorder struct {
	mock *MockRandomGenerator
}

// NewMockRandomGenerator creates a new mock instance.
func NewMockRandomGenerator(ctrl *gomock.Controller) *MockRandomGenerator {
	mock := &MockRandomGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomGenerator) EXPECT() *MockRandomGeneratorMockRecorder {
	return m.recorder
}

// Intn mocks base method.
func (m *MockRandomGenerator) Intn(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Intn", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Intn indicates an expected call of Intn.
func (mr *MockRandomGeneratorMockRecorder) Intn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Intn", reflect.TypeOf((*MockRandomGenerator)(nil).Intn), arg0)
}

// Perm mocks base method.
func (m *MockRandomGenerator) Perm(arg0 int) []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Perm", arg0)
	ret0, _ := ret[0].([]int)
	return ret0
}

// Perm indicates an expected call of Perm.
func (mr *MockRandomGeneratorMockRecorder) Perm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Perm", reflect.TypeOf((*MockRandomGenerator)(nil).Perm), arg0)
}
