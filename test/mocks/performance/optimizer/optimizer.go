// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/internal/performance/optimizer (interfaces: IdentifiableCacheableOptimizer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/lothar1998/v2x-optimizer/pkg/data"
	optimizer "github.com/lothar1998/v2x-optimizer/pkg/optimizer"
)

// MockIdentifiableCacheableOptimizer is a mock of IdentifiableCacheableOptimizer interface.
type MockIdentifiableCacheableOptimizer struct {
	ctrl     *gomock.Controller
	recorder *MockIdentifiableCacheableOptimizerMockRecorder
}

// MockIdentifiableCacheableOptimizerMockRecorder is the mock recorder for MockIdentifiableCacheableOptimizer.
type MockIdentifiableCacheableOptimizerMockRecorder struct {
	mock *MockIdentifiableCacheableOptimizer
}

// NewMockIdentifiableCacheableOptimizer creates a new mock instance.
func NewMockIdentifiableCacheableOptimizer(ctrl *gomock.Controller) *MockIdentifiableCacheableOptimizer {
	mock := &MockIdentifiableCacheableOptimizer{ctrl: ctrl}
	mock.recorder = &MockIdentifiableCacheableOptimizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdentifiableCacheableOptimizer) EXPECT() *MockIdentifiableCacheableOptimizerMockRecorder {
	return m.recorder
}

// CacheEligible mocks base method.
func (m *MockIdentifiableCacheableOptimizer) CacheEligible() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheEligible")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CacheEligible indicates an expected call of CacheEligible.
func (mr *MockIdentifiableCacheableOptimizerMockRecorder) CacheEligible() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheEligible", reflect.TypeOf((*MockIdentifiableCacheableOptimizer)(nil).CacheEligible))
}

// Identifier mocks base method.
func (m *MockIdentifiableCacheableOptimizer) Identifier() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identifier")
	ret0, _ := ret[0].(string)
	return ret0
}

// Identifier indicates an expected call of Identifier.
func (mr *MockIdentifiableCacheableOptimizerMockRecorder) Identifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identifier", reflect.TypeOf((*MockIdentifiableCacheableOptimizer)(nil).Identifier))
}

// Optimize mocks base method.
func (m *MockIdentifiableCacheableOptimizer) Optimize(arg0 context.Context, arg1 *data.Data) (*optimizer.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Optimize", arg0, arg1)
	ret0, _ := ret[0].(*optimizer.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Optimize indicates an expected call of Optimize.
func (mr *MockIdentifiableCacheableOptimizerMockRecorder) Optimize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Optimize", reflect.TypeOf((*MockIdentifiableCacheableOptimizer)(nil).Optimize), arg0, arg1)
}
