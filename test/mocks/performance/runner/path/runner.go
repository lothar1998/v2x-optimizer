// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/internal/performance/runner (interfaces: PathRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	runner "github.com/lothar1998/v2x-optimizer/internal/performance/runner"
)

// MockPathRunner is a mock of PathRunner interface.
type MockPathRunner struct {
	ctrl     *gomock.Controller
	recorder *MockPathRunnerMockRecorder
}

// MockPathRunnerMockRecorder is the mock recorder for MockPathRunner.
type MockPathRunnerMockRecorder struct {
	mock *MockPathRunner
}

// NewMockPathRunner creates a new mock instance.
func NewMockPathRunner(ctrl *gomock.Controller) *MockPathRunner {
	mock := &MockPathRunner{ctrl: ctrl}
	mock.recorder = &MockPathRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathRunner) EXPECT() *MockPathRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockPathRunner) Run(arg0 context.Context, arg1 string) <-chan *runner.PathResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(<-chan *runner.PathResult)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockPathRunnerMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPathRunner)(nil).Run), arg0, arg1)
}
