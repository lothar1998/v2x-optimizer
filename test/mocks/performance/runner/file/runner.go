// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/internal/performance/runner (interfaces: FileRunner)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	executor "github.com/lothar1998/v2x-optimizer/internal/performance/executor"
	runner "github.com/lothar1998/v2x-optimizer/internal/performance/runner"
)

// MockFileRunner is a mock of FileRunner interface.
type MockFileRunner struct {
	ctrl     *gomock.Controller
	recorder *MockFileRunnerMockRecorder
}

// MockFileRunnerMockRecorder is the mock recorder for MockFileRunner.
type MockFileRunnerMockRecorder struct {
	mock *MockFileRunner
}

// NewMockFileRunner creates a new mock instance.
func NewMockFileRunner(ctrl *gomock.Controller) *MockFileRunner {
	mock := &MockFileRunner{ctrl: ctrl}
	mock.recorder = &MockFileRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRunner) EXPECT() *MockFileRunnerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFileRunner) Run(arg0 context.Context, arg1 []executor.Executor, arg2 string) <-chan *runner.FileResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1, arg2)
	ret0, _ := ret[0].(<-chan *runner.FileResult)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockFileRunnerMockRecorder) Run(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFileRunner)(nil).Run), arg0, arg1, arg2)
}
