// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/internal/performance/runner/view (interfaces: DirectoryView)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDirectoryView is a mock of DirectoryView interface.
type MockDirectoryView struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryViewMockRecorder
}

// MockDirectoryViewMockRecorder is the mock recorder for MockDirectoryView.
type MockDirectoryViewMockRecorder struct {
	mock *MockDirectoryView
}

// NewMockDirectoryView creates a new mock instance.
func NewMockDirectoryView(ctrl *gomock.Controller) *MockDirectoryView {
	mock := &MockDirectoryView{ctrl: ctrl}
	mock.recorder = &MockDirectoryViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryView) EXPECT() *MockDirectoryViewMockRecorder {
	return m.recorder
}

// Dir mocks base method.
func (m *MockDirectoryView) Dir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dir")
	ret0, _ := ret[0].(string)
	return ret0
}

// Dir indicates an expected call of Dir.
func (mr *MockDirectoryViewMockRecorder) Dir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dir", reflect.TypeOf((*MockDirectoryView)(nil).Dir))
}

// Files mocks base method.
func (m *MockDirectoryView) Files() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Files")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Files indicates an expected call of Files.
func (mr *MockDirectoryViewMockRecorder) Files() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Files", reflect.TypeOf((*MockDirectoryView)(nil).Files))
}
