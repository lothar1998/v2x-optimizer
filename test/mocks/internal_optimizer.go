// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lothar1998/v2x-optimizer/internal/performance/optimizer (interfaces: Wrapper)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	data "github.com/lothar1998/v2x-optimizer/pkg/data"
	optimizer "github.com/lothar1998/v2x-optimizer/pkg/optimizer"
)

// MockOptimizer is a mock of Wrapper interface.
type MockOptimizer struct {
	ctrl     *gomock.Controller
	recorder *MockOptimizerMockRecorder
}

// MockOptimizerMockRecorder is the mock recorder for MockOptimizer.
type MockOptimizerMockRecorder struct {
	mock *MockOptimizer
}

// NewMockOptimizer creates a new mock instance.
func NewMockOptimizer(ctrl *gomock.Controller) *MockOptimizer {
	mock := &MockOptimizer{ctrl: ctrl}
	mock.recorder = &MockOptimizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptimizer) EXPECT() *MockOptimizerMockRecorder {
	return m.recorder
}

// IsCacheable mocks base method.
func (m *MockOptimizer) IsCacheable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCacheable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCacheable indicates an expected call of IsCacheable.
func (mr *MockOptimizerMockRecorder) IsCacheable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCacheable", reflect.TypeOf((*MockOptimizer)(nil).IsCacheable))
}

// Name mocks base method.
func (m *MockOptimizer) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockOptimizerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockOptimizer)(nil).Name))
}

// Optimize mocks base method.
func (m *MockOptimizer) Optimize(arg0 context.Context, arg1 *data.Data) (*optimizer.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Optimize", arg0, arg1)
	ret0, _ := ret[0].(*optimizer.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Optimize indicates an expected call of Optimize.
func (mr *MockOptimizerMockRecorder) Optimize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Optimize", reflect.TypeOf((*MockOptimizer)(nil).Optimize), arg0, arg1)
}
